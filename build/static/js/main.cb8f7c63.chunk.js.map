{"version":3,"sources":["component/Days/Day.jsx","component/Days/Day1.jsx","component/Days/Day2.jsx","component/Days/Day3.jsx","component/Days/Day4.jsx","component/Days/Day5.jsx","component/Hours/Hour.jsx","component/Hours/Hours.jsx","component/place.jsx","App.js","index.js"],"names":["Day","converter","temp","toFixed","day","dt","Date","toLocaleString","weekday","dayNum","this","props","max","min","icon","weather","className","src","alt","id","React","Component","Day1","getStyle","display","justifyContent","days","style","key","to","activeClassName","Day2","Day3","Day4","Day5","Hour","hour","feels_like","Hours","parma","parseInt","match","params","currenthr","filter","length","map","location","Timezone","App","state","checkGeo","navigator","weatherData","a","getCoordinates","position","url","coords","latitude","longitude","fetch","res","json","data","daily","dailyneed","dailyfilter","weatherDataSeter","forEach","element","push","option","Promise","resolve","reject","geolocation","getCurrentPosition","setState","timezone","hourly","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb8f7c63.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Day extends React.Component {\n    converter = temp => {\n        return (temp - 273).toFixed(0);\n    };\n    day = dt => {\n        return new Date(dt * 1000).toLocaleString(\"en-US\", { weekday: \"short\" });\n    };\n\n    dayNum = dt => {\n        return new Date(dt * 1000).toLocaleString(\"en-US\", { day: \"numeric\" });\n    };\n    render() {\n        const { max, min } = this.props.day.temp;\n        const { dt } = this.props.day;\n        const { icon } = this.props.day.weather[0];\n        return (\n            <div className=\"Box\">\n                <h3>\n                    {this.day(dt)}, {this.dayNum(dt)}\n                </h3>\n                <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"icon\"></img>\n                <div id=\"temp\">\n                    <div className=\"temp\">\n                        {this.converter(max)} <span>°C</span>\n                    </div>\n                    <div className=\"tempMin\">\n                        {this.converter(min)} <span>°C</span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Day;\n","import React from \"react\";\nimport Day from \"./Day\";\nimport { NavLink as Link } from \"react-router-dom\";\n\nclass Day1 extends React.Component {\n    render() {\n        const day = this.props.days[0];\n        if (day == null) return null;\n        else {\n            return (\n                <div style={this.getStyle()}>\n                    <Link key={day.dt} to={`/day${day.dt}`} activeClassName=\"active\">\n                        <Day day={day} />\n                    </Link>\n                </div>\n            );\n        }\n    }\n    getStyle = () => {\n        return {\n            display: \"flex\",\n            justifyContent: \"center\"\n        };\n    };\n}\n\nexport default Day1;\n","import React from \"react\";\nimport Day from \"./Day\";\nimport { NavLink as Link } from \"react-router-dom\";\n\nclass Day2 extends React.Component {\n    render() {\n        const day = this.props.days[1];\n        if (day == null) return null;\n        else {\n            return (\n                <div style={this.getStyle()}>\n                    <Link key={day.dt} to={`/day${day.dt}`} activeClassName=\"active\">\n                        <Day day={day} />\n                    </Link>\n                </div>\n            );\n        }\n    }\n    getStyle = () => {\n        return {\n            display: \"flex\",\n            justifyContent: \"center\"\n        };\n    };\n}\n\nexport default Day2;\n","import React from \"react\";\nimport Day from \"./Day\";\nimport { NavLink as Link } from \"react-router-dom\";\n\nclass Day3 extends React.Component {\n    render() {\n        const day = this.props.days[2];\n        if (day == null) return null;\n        else {\n            return (\n                <div style={this.getStyle()}>\n                    <Link key={day.dt} to={`/day${day.dt}`} activeClassName=\"active\">\n                        <Day day={day} />\n                    </Link>\n                </div>\n            );\n        }\n    }\n    getStyle = () => {\n        return {\n            display: \"flex\",\n            justifyContent: \"center\"\n        };\n    };\n}\n\nexport default Day3;\n","import React from \"react\";\nimport Day from \"./Day\";\nimport { NavLink as Link } from \"react-router-dom\";\n\nclass Day4 extends React.Component {\n    render() {\n        const day = this.props.days[3];\n        if (day == null) return null;\n        else {\n            return (\n                <div style={this.getStyle()}>\n                    <Link key={day.dt} to={`/day${day.dt}`} activeClassName=\"active\">\n                        <Day day={day} />\n                    </Link>\n                </div>\n            );\n        }\n    }\n    getStyle = () => {\n        return {\n            display: \"flex\",\n            justifyContent: \"center\"\n        };\n    };\n}\n\nexport default Day4;\n","import React from \"react\";\nimport Day from \"./Day\";\nimport { NavLink as Link } from \"react-router-dom\";\n\nclass Day5 extends React.Component {\n    render() {\n        const day = this.props.days[4];\n        if (day == null) return null;\n        else {\n            return (\n                <div style={this.getStyle()}>\n                    <Link key={day.dt} to={`/day${day.dt}`} activeClassName=\"active\">\n                        <Day day={day} />\n                    </Link>\n                </div>\n            );\n        }\n    }\n    getStyle = () => {\n        return {\n            display: \"flex\",\n            justifyContent: \"center\"\n        };\n    };\n}\n\nexport default Day5;\n","import React from \"react\";\n\nclass Hour extends React.Component {\n    converter = temp => {\n        return (temp - 273).toFixed(0);\n    };\n    render() {\n        const { icon } = this.props.hour.weather[0];\n        const { dt, temp, feels_like } = this.props.hour;\n        const day = new Date(dt * 1000).toLocaleString(\"en-US\", { hour: \"numeric\" });\n        return (\n            <div id=\"hour\">\n                <h3 className=\"exacthour\">{day}</h3>\n                <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"icon\"></img>\n                <div id=\"tempHr\">\n                    <div className=\"temp\">\n                        {this.converter(temp)} <span>°C</span>\n                    </div>\n                    <div className=\"tempFeel\">\n                        {this.converter(feels_like)} <span>°C</span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Hour;\n","import React from \"react\";\nimport Hour from \"./Hour\";\nclass Hours extends React.Component {\n    // state = {\n    //     Hours: []\n    // };\n\n    // async componentDidMount() {\n    //     const url =\n    //         \"https://api.openweathermap.org/data/2.5/onecall?lat=6.5244&lon=3.3792&appid=c4bf502f01ad796b2ae93a93063fccb2\";\n    //     const res = await fetch(url);\n    //     const data = await res.json();\n    //     const hourly = data.hourly;\n    //     this.setState({ Hours: hourly });\n    // }\n\n    render() {\n        const parma = parseInt(this.props.match.params.dt);\n        const day = new Date(parma * 1000).toLocaleString(\"en-US\", { day: \"numeric\" });\n        const currenthr = this.props.Hours.filter(\n            hour => day === new Date(hour.dt * 1000).toLocaleString(\"en-US\", { day: \"numeric\" })\n        );\n\n        if (currenthr.length === 0) {\n            return (\n                <div className=\"hourbox1\">\n                    <h1> No hourly data available</h1>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"hourbox\">\n                    {currenthr.map(hour => (\n                        <Hour key={hour.dt} hour={hour} />\n                    ))}\n                </div>\n            );\n        }\n    }\n}\nexport default Hours;\n","import React from \"react\";\n\nconst location = props => {\n    const { Timezone } = props;\n    if (Timezone == null) {\n        return null;\n    } else {\n        return <div className=\"location\">{Timezone}</div>;\n    }\n};\n\nexport default location;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Day1 from \"./component/Days/Day1\";\nimport Day2 from \"./component/Days/Day2\";\nimport Day3 from \"./component/Days/Day3\";\nimport Day4 from \"./component/Days/Day4\";\nimport Day5 from \"./component/Days/Day5\";\nimport Hours from \"./component/Hours/Hours\";\nimport Location from \"./component/place\";\nclass App extends React.Component {\n    state = {\n        days: [],\n        Hours: [],\n        Timezone: \"\"\n    };\n\n    componentDidMount() {\n        this.checkGeo();\n    }\n\n    //when application starts, check of the webpage has ability to use Geolocatio.\n    checkGeo = () => {\n        if (\"geolocation\" in navigator) {\n            this.weatherData();\n        }\n    };\n\n    weatherData = async () => {\n        const position = await this.getCoordinates();\n        const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${position.coords.latitude}&lon=${position.coords.longitude}&appid=c4bf502f01ad796b2ae93a93063fccb2`;\n        const res = await fetch(url);\n        const data = await res.json();\n        const daily = data.daily;\n        const dailyneed = this.dailyfilter(daily);\n        this.weatherDataSeter(data, dailyneed);\n    };\n\n    // filter all the daily data gotten from the API to collect just 5\n    dailyfilter = daily => {\n        let dailyneed = [];\n        daily.forEach(element => {\n            if (dailyneed.length < 5) {\n                dailyneed.push(element);\n            }\n        });\n        return dailyneed;\n    };\n\n    // return a promise which gives our location when its resolved\n    getCoordinates = (option = {}) => {\n        return new Promise((resolve, reject) => {\n            navigator.geolocation.getCurrentPosition(resolve, reject, option);\n        });\n    };\n\n    //Set the state for the weather App\n    weatherDataSeter = (data, dailyneed) => {\n        this.setState({ days: dailyneed });\n        this.setState({ Timezone: data.timezone });\n        this.setState({ Hours: data.hourly });\n    };\n\n    render() {\n        return (\n            <Router>\n                <div className=\"App\">\n                    <Location Timezone={this.state.Timezone} />\n                    <div className=\"navBar\">\n                        <Day1 days={this.state.days} />\n                        <Day2 days={this.state.days} />\n                        <Day3 days={this.state.days} />\n                        <Day4 days={this.state.days} />\n                        <Day5 days={this.state.days} />\n                    </div>\n                    <Switch>\n                        <Route path=\"/day:dt\" component={props => <Hours {...props} Hours={this.state.Hours} />} />\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}